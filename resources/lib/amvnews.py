# coding=utf-8
"""
Unofficial API to http://amvnews.ru.
"""
import urllib
import urllib2
import re
from bs4 import BeautifulSoup
from constants import PLUGIN


__all__ = ['get_featured_amv_list', 'get_amv']


@PLUGIN.cached(TTL=5)
def get_featured_amv_list(page):
    """
    Get information about featured AMV.

    To avoid heavy queries featured AMV are obtained by small portions
    (pages). Data for each page is obtained independently by demand.

    :param int page: Page number.
    :return: List of featured AMV metadata.
    :rtype: dict
    """
    html = _get_html_page(
        {'go': 'News', 'page': (page - 1) * 10, 'in': 'cat', 'id': 1})

    result = []
    for node in html.find_all('span', attrs={'class': 'newstitle'}):
        amv_link = node.find_parent('table').find_next_sibling('table').find(
            'a', attrs={'class': 'more-news-simple-a'}
        ).attrs['href']
        metadata = get_amv(int(REGEX_AMV_ID.match(amv_link).groupdict()['id']))
        metadata.update({
            'date': node.find_parent('td').find_next_sibling('td').text.strip()
        })
        result.append(metadata)
    return result


def get_amv(amv_id):
    """
    Get information about specified AMV.
    :param int amv_id: Identifier of AMV.
    :return: AMV metadata.
    :rtype: dict
    """
    storage = PLUGIN.get_storage('amvnews_amv_metadata')
    if amv_id in storage:
        return storage[amv_id]

    html = _get_html_page({'go': 'Files', 'in': 'view', 'id': amv_id})

    metadata = {
        'id': amv_id,
        'title': html.find(itemprop='name').text.strip(),
        'description': html.find(itemprop='description').text.strip(),
        'rating': float(html.find(itemprop='ratingValue').text.strip()),
        'path': _get_full_url({'go': 'Files', 'file': 'down', 'id': amv_id}),
        'image': 'http://amvnews.ru{}'.format(
            html.find(itemprop='image').attrs['src'])
    }

    file_info = html.find(id='main-link-block').find('a').attrs['onmouseover']

    duration = 0
    match = REGEX_AMV_DURATION.match(file_info)
    if match:
        minutes, seconds = match.groupdict()['min'], match.groupdict()['sec']
        if minutes:
            duration += int(minutes) * 60
        if seconds:
            duration += int(seconds)
    metadata['duration'] = duration

    size_in_bytes = 0
    match = REGEX_AMV_SIZE.match(file_info)
    if match:
        size = match.groupdict()['size']
        if size:
            size_in_bytes = int(float(size) * 1024 * 1024)
    metadata['size'] = size_in_bytes

    storage[amv_id] = metadata
    return metadata


def _get_full_url(url_params):
    """
    Get full URL to query http://amvnews.ru with specified URL params.

    :param dict url_params: URL params.
    :return: Full URL.
    :rtype: str
    """
    url = 'http://amvnews.ru/index.php'
    params = urllib.urlencode(url_params)
    return '{}?{}'.format(url, params)


def _get_html_page(url_params):
    """
    Get HTML page generated by http://amvnews.ru for specified URL params.

    :param dict url_params: URL params.
    :return: Parsed HTML page.
    :rtype: BeautifulSoup
    """
    return BeautifulSoup(urllib2.urlopen(_get_full_url(url_params)).read())


REGEX_AMV_ID = re.compile(u'^.*id=(?P<id>\d+).*$')
REGEX_AMV_DURATION = re.compile(
    u'^.*Длительность</b>: ((?P<min>\d+) мин )?((?P<sec>\d+) сек)?.*$')
REGEX_AMV_SIZE = re.compile(
    u'^.*Размер</b>: ((?P<size>[\d\.]+) Мб)?.*$')
